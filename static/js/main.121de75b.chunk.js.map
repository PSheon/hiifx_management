{"version":3,"sources":["components/Gantt/Gantt.js","components/Gantt/index.js","components/Toolbar/Toolbar.js","components/Toolbar/index.js","components/MessageArea/MessageArea.js","components/MessageArea/index.js","App.js","serviceWorker.js","index.js"],"names":["Gantt","props","dataProcessor","initZoom","gantt","ext","zoom","init","levels","name","scale_height","min_column_width","scales","unit","step","format","value","setLevel","onDataUpdated","this","createDataProcessor","type","action","item","id","Promise","resolve","reject","nextProps","config","xml_date","tasks","ganttContainer","initGanttDataProcessor","parse","destructor","setZoom","ref","input","style","width","height","Component","Toolbar","handleZoomChange","e","onZoomChange","target","zoomRadios","map","isActive","key","className","checked","onChange","marginLeft","MessageArea","messages","message","Math","random","defaultProps","Date","prototype","Format","fmt","o","getMonth","getDate","getHours","getMinutes","getSeconds","floor","S","getMilliseconds","k","test","replace","RegExp","$1","getFullYear","substr","length","INIT_DATA","data","text","start_date","duration","progress","App","state","isReady","isUpdating","currentZoom","logDataUpdate","setState","source","addMessage","NEW_DATA","getTaskByTime","links","getLinks","localStorage","setItem","JSON","stringify","LOCAL_DATA","getItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.121de75b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { gantt } from \"dhtmlx-gantt\";\nimport \"dhtmlx-gantt/codebase/dhtmlxgantt.css\";\n\nexport default class Gantt extends Component {\n  constructor(props) {\n    super(props);\n    this.initZoom();\n  }\n\n  // instance of gantt.dataProcessor\n  dataProcessor = null;\n\n  initZoom() {\n    gantt.ext.zoom.init({\n      levels: [\n        {\n          name: \"日\",\n          scale_height: 60,\n          min_column_width: 70,\n          scales: [\n            { unit: \"week\", step: 1, format: \"Week #%W\" },\n            { unit: \"day\", step: 1, format: \"%d %M\" },\n          ],\n        },\n        {\n          name: \"月\",\n          scale_height: 60,\n          min_column_width: 70,\n          scales: [\n            { unit: \"month\", step: 1, format: \"%F\" },\n            { unit: \"week\", step: 1, format: \"#%W\" },\n          ],\n        },\n      ],\n    });\n  }\n\n  setZoom(value) {\n    gantt.ext.zoom.setLevel(value);\n  }\n\n  initGanttDataProcessor() {\n    /**\n     * type: \"task\"|\"link\"\n     * action: \"create\"|\"update\"|\"delete\"\n     * item: data object object\n     */\n    const onDataUpdated = this.props.onDataUpdated;\n    this.dataProcessor = gantt.createDataProcessor((type, action, item, id) => {\n      return new Promise((resolve, reject) => {\n        if (onDataUpdated) {\n          onDataUpdated(type, action, item, id);\n        }\n\n        // if onDataUpdated changes returns a permanent id of the created item, you can return it from here so dhtmlxGantt could apply it\n        // resolve({id: databaseId});\n        return resolve();\n      });\n    });\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.zoom !== nextProps.zoom;\n  }\n\n  componentDidMount() {\n    gantt.config.xml_date = \"%Y-%m-%d %H:%i\";\n    const { tasks } = this.props;\n    gantt.init(this.ganttContainer);\n    this.initGanttDataProcessor();\n    gantt.parse(tasks);\n  }\n\n  componentWillUnmount() {\n    if (this.dataProcessor) {\n      this.dataProcessor.destructor();\n      this.dataProcessor = null;\n    }\n  }\n\n  render() {\n    const { zoom } = this.props;\n    this.setZoom(zoom);\n    return (\n      <div\n        ref={(input) => {\n          this.ganttContainer = input;\n        }}\n        style={{ width: \"100%\", height: \"100%\" }}\n      ></div>\n    );\n  }\n}\n","import Gantt from './Gantt';\nimport './Gantt.css';\nexport default Gantt;","import React, { Component } from \"react\";\nexport default class Toolbar extends Component {\n  handleZoomChange = (e) => {\n    if (this.props.onZoomChange) {\n      this.props.onZoomChange(e.target.value);\n    }\n  };\n  render() {\n    const zoomRadios = [\"日\", \"月\"].map((value) => {\n      const isActive = this.props.zoom === value;\n      return (\n        <label\n          key={value}\n          className={`radio-label ${isActive ? \"radio-label-active\" : \"\"}`}\n        >\n          <input\n            type=\"radio\"\n            checked={isActive}\n            onChange={this.handleZoomChange}\n            value={value}\n          />\n          {value}\n        </label>\n      );\n    });\n\n    return (\n      <div className=\"tool-bar\">\n        <div>\n          <b>海匯團隊資金管理工具 </b>\n        </div>\n        <div>\n          <b style={{ marginLeft: \"auto\" }}>縮放維度：</b>\n          {zoomRadios}\n        </div>\n      </div>\n    );\n  }\n}\n","import Toolbar from './Toolbar';\nimport './Toolbar.css';\nexport default Toolbar;","import React, { Component } from \"react\";\n\nclass MessageArea extends Component {\n  render() {\n    const messages = this.props.messages.map(({ message }) => {\n      return <li key={Math.random()}>{message}</li>;\n    });\n\n    return (\n      <div className=\"message-area\">\n        <h3>操作紀錄：</h3>\n        <ul>{messages}</ul>\n      </div>\n    );\n  }\n}\n\nMessageArea.defaultProps = {\n  messages: [],\n};\n\nexport default MessageArea;\n","import MessageArea from './MessageArea';\nimport './MessageArea.css';\nexport default MessageArea;","import React, { Component } from \"react\";\nimport Gantt from \"./components/Gantt\";\nimport { gantt } from \"dhtmlx-gantt\";\nimport Toolbar from \"./components/Toolbar\";\nimport MessageArea from \"./components/MessageArea\";\nimport \"./App.css\";\n\nDate.prototype.Format = function (fmt) {\n  //author: meizz\n  var o = {\n    \"M+\": this.getMonth() + 1, //月份\n    \"d+\": this.getDate(), //日\n    \"h+\": this.getHours(), //小时\n    \"m+\": this.getMinutes(), //分\n    \"s+\": this.getSeconds(), //秒\n    \"q+\": Math.floor((this.getMonth() + 3) / 3), //季度\n    S: this.getMilliseconds(), //毫秒\n  };\n  if (/(y+)/.test(fmt))\n    fmt = fmt.replace(\n      RegExp.$1,\n      (this.getFullYear() + \"\").substr(4 - RegExp.$1.length)\n    );\n  for (var k in o)\n    if (new RegExp(\"(\" + k + \")\").test(fmt))\n      fmt = fmt.replace(\n        RegExp.$1,\n        RegExp.$1.length === 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length)\n      );\n  return fmt;\n};\n\nconst INIT_DATA = {\n  data: [\n    {\n      id: 1,\n      text: \"我 $1500\",\n      start_date: \"2020-06-24\",\n      duration: 3,\n      progress: 0.6,\n    },\n    // {\n    //   id: 2,\n    //   text: \"Task #2\",\n    //   start_date: \"2020-02-16\",\n    //   duration: 3,\n    //   progress: 0.4,\n    // },\n  ],\n  // links: [{ id: 1, source: 1, target: 2, type: \"0\" }],\n};\nclass App extends Component {\n  state = {\n    isReady: false,\n    isUpdating: false,\n    tasks: null,\n    currentZoom: \"日\",\n    messages: [],\n  };\n\n  addMessage(message) {\n    const maxLogLength = 5;\n    const newMessate = { message };\n    const messages = [newMessate, ...this.state.messages];\n\n    if (messages.length > maxLogLength) {\n      messages.length = maxLogLength;\n    }\n    this.setState({ messages });\n  }\n\n  logDataUpdate = (type, action, item, id) => {\n    if (this.state.isUpdating === false) {\n      this.setState({ isUpdating: true });\n      let text = item && item.text ? ` (${item.text})` : \"\";\n      let message = `${type} ${action}: ${id} ${text}`;\n      if (type === \"link\" && action !== \"delete\") {\n        message += ` ( source: ${item.source}, target: ${item.target} )`;\n      }\n      this.addMessage(message);\n      const NEW_DATA = {\n        data: gantt.getTaskByTime().map((item) => ({\n          id: item.id,\n          text: item.text,\n          start_date: new Date(item.start_date).Format(\"yyyy-MM-dd\"),\n          duration: item.duration,\n          progress: 0.6,\n        })),\n        links: gantt.getLinks(),\n      };\n\n      localStorage.setItem(\"hiifx_data\", JSON.stringify(NEW_DATA));\n      this.setState({ isUpdating: false });\n    }\n  };\n\n  handleZoomChange = (zoom) => {\n    this.setState({\n      currentZoom: zoom,\n    });\n  };\n\n  componentDidMount() {\n    const LOCAL_DATA = localStorage.getItem(\"hiifx_data\");\n    if (!!LOCAL_DATA) {\n      this.setState({ tasks: JSON.parse(LOCAL_DATA), isReady: true });\n    } else {\n      localStorage.setItem(\"hiifx_data\", JSON.stringify(INIT_DATA));\n      this.setState({ tasks: INIT_DATA, isReady: true });\n    }\n  }\n\n  render() {\n    const { isReady, tasks, currentZoom, messages } = this.state;\n\n    return (\n      <div>\n        <div className=\"zoom-bar\">\n          <Toolbar zoom={currentZoom} onZoomChange={this.handleZoomChange} />\n        </div>\n        <div className=\"gantt-container\">\n          {isReady && (\n            <Gantt\n              tasks={tasks}\n              zoom={currentZoom}\n              onDataUpdated={this.logDataUpdate}\n            />\n          )}\n        </div>\n        <MessageArea messages={messages} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}